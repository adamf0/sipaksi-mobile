carry: done
beta: fungsional aktif & revisi fungsi
alpha: mockup & revisi ui/konsep

FileTypeGroup.getExtensions([
        FileTypeGroup.image,
        FileTypeGroup.document,
      ]),


//ini multiple
import 'package:flutter/material.dart';
import 'dart:io';
import 'package:file_picker/file_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';

class FileLifecycleManager with WidgetsBindingObserver {
  List<PlatformFile> selectedFiles = [];

  void init() {
    WidgetsBinding.instance.addObserver(this);
    loadSavedFiles(); // Load saved files when initializing
  }

  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
  }

  bool lifecycleHasCloseOrDestroy(AppLifecycleState state) {
    return [AppLifecycleState.detached, AppLifecycleState.inactive]
        .contains(state);
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (lifecycleHasCloseOrDestroy(state)) {
      _clearSavedFilePaths();
    }
  }

  Future<void> loadSavedFiles() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String>? filePaths = prefs.getStringList('selectedFilePaths');

    if (filePaths != null) {
      selectedFiles.clear();
      for (var filePath in filePaths) {
        if (File(filePath).existsSync()) {
          selectedFiles.add(PlatformFile(
            path: filePath,
            name: filePath.split('/').last,
            size: File(filePath).lengthSync(),
          ));
        }
      }
    }
  }

  Future<void> saveFilePaths(List<String> filePaths) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setStringList('selectedFilePaths', filePaths);
    selectedFiles = filePaths.map((path) {
      return PlatformFile(
        path: path,
        name: path.split('/').last,
        size: File(path).lengthSync(),
      );
    }).toList();
  }

  Future<void> _clearSavedFilePaths() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.remove('selectedFilePaths');
    selectedFiles.clear(); // Clear the selected files list
  }
}
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:file_picker/file_picker.dart';
import 'package:sipaksi/Module/PenelitianInternal/Form/FileLifecycleManager.dart';

class FileUploadExample extends StatefulWidget {
  @override
  _FileUploadExampleState createState() => _FileUploadExampleState();
}

class _FileUploadExampleState extends State<FileUploadExample>
    with WidgetsBindingObserver {
  final FileLifecycleManager _fileLifecycleManager = FileLifecycleManager();
  List<double> _uploadProgresses = [];
  List<bool> _uploadingStates = [];

  @override
  void initState() {
    super.initState();
    _fileLifecycleManager.init();
    _uploadProgresses =
        List<double>.filled(_fileLifecycleManager.selectedFiles.length, 0.0);
    _uploadingStates =
        List<bool>.filled(_fileLifecycleManager.selectedFiles.length, false);
  }

  @override
  void dispose() {
    _fileLifecycleManager.dispose();
    super.dispose();
  }

  Future<void> _pickFiles() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      allowMultiple: true,
      type: FileType.custom,
      allowedExtensions: [
        'jpg',
        'png',
        'pdf',
        'doc'
      ], // Add your allowed extensions
    );

    if (result != null && result.files.isNotEmpty) {
      List<String> filePaths = result.paths.whereType<String>().toList();
      await _fileLifecycleManager.saveFilePaths(filePaths);
      setState(() {
        _uploadProgresses = List<double>.filled(
            _fileLifecycleManager.selectedFiles.length, 0.0);
        _uploadingStates = List<bool>.filled(
            _fileLifecycleManager.selectedFiles.length, false);
      });
    }
  }

  Future<void> _uploadFiles() async {
    if (_fileLifecycleManager.selectedFiles.isNotEmpty) {
      List<Future<void>> uploadFutures = [];

      for (int i = 0; i < _fileLifecycleManager.selectedFiles.length; i++) {
        final file = _fileLifecycleManager.selectedFiles[i];
        uploadFutures.add(_uploadFile(file, i));
      }

      await Future.wait(uploadFutures); // Wait for all uploads to complete
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('All files successfully uploaded!')));
    }
  }

  Future<void> _uploadFile(PlatformFile file, int index) async {
    _uploadingStates[index] =
        true; // Set the uploading state to true for this file
    Dio dio = Dio();
    FormData formData = FormData.fromMap({
      'file': await MultipartFile.fromFile(file.path!, filename: file.name),
    });

    try {
      await dio.post('https://your-api-endpoint.com/upload', data: formData,
          onSendProgress: (sent, total) {
        setState(() {
          _uploadProgresses[index] =
              sent / total; // Update progress for this specific file
        });
      });
    } catch (e) {
      print('Upload failed for ${file.name}: $e');
    } finally {
      setState(() {
        _uploadingStates[index] =
            false; // Reset uploading state after completion
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Concurrent File Upload Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            _fileLifecycleManager.selectedFiles.isNotEmpty
                ? Column(
                    children: List.generate(
                        _fileLifecycleManager.selectedFiles.length, (index) {
                      var file = _fileLifecycleManager.selectedFiles[index];
                      return Column(
                        children: [
                          Text('File: ${file.name} (${file.size} bytes)'),
                          LinearProgressIndicator(
                              value: _uploadProgresses[index]),
                          SizedBox(height: 10),
                          Text(_uploadingStates[index]
                              ? 'Uploading...'
                              : 'Upload Complete'),
                          SizedBox(height: 20),
                        ],
                      );
                    }),
                  )
                : Text('No files selected'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pickFiles,
              child: Text('Pick Files'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _uploadFiles,
              child: Text('Upload Files'),
            ),
          ],
        ),
      ),
    );
  }
}


//ini single
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'dart:io';
import 'package:file_picker/file_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'FileTypeGroup.dart';

class FileLifecycleManager with WidgetsBindingObserver {
  PlatformFile? selectedFile;

  void init() {
    WidgetsBinding.instance.addObserver(this);
  }

  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
  }

  bool lifecycleHasCloseOrDestroy(AppLifecycleState state) {
    return [AppLifecycleState.detached, AppLifecycleState.inactive]
        .contains(state);
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (lifecycleHasCloseOrDestroy(state)) {
      _clearSavedFilePath();
    }
  }

  Future<void> loadSavedFile() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? filePath = prefs.getString('selectedFilePath');

    if (filePath != null && File(filePath).existsSync()) {
      selectedFile = PlatformFile(
        path: filePath,
        name: filePath.split('/').last,
        size: File(filePath).lengthSync(),
      );
    }
  }

  Future<void> saveFilePath(String filePath) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('selectedFilePath', filePath);
  }

  Future<void> _clearSavedFilePath() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.remove('selectedFilePath');
  }
}

class FileUploadExample extends StatefulWidget {
  @override
  _FileUploadExampleState createState() => _FileUploadExampleState();
}

class _FileUploadExampleState<T extends FileUploadExample>
    extends State<T> with WidgetsBindingObserver {
  double _uploadProgress = 0.0;
  bool _isUploading = false;
  final FileLifecycleManager _fileLifecycleManager = FileLifecycleManager();

  @override
  void initState() {
    super.initState();
    _fileLifecycleManager.init();
    _fileLifecycleManager.loadSavedFile(); // Load saved file if available on app start
  }

  @override
  void dispose() {
    _fileLifecycleManager.dispose();
    super.dispose();
  }

  void _onProgressUpdate(double progress) {
    setState(() {
      _uploadProgress = progress;
    });
  }

  void _onUploadStart() {
    setState(() {
      _isUploading = true;
    });
  }

  void _onUploadComplete() {
    setState(() {
      _uploadProgress = 0.0;
      _isUploading = false;
      _fileLifecycleManager.selectedFile = null; // Clear selected file
    });
  }

  void _onUploadFailed() {
    setState(() {
      _isUploading = false;
    });
  }

  Future<void> _pickFile() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: FileTypeGroup.getExtensions([
        FileTypeGroup.image,
        FileTypeGroup.document,
      ]),
    );

    if (result != null && result.files.isNotEmpty) {
      setState(() {
        _fileLifecycleManager.selectedFile = result.files.single;
      });
      await _fileLifecycleManager.saveFilePath(_fileLifecycleManager.selectedFile!.path!);
    }
  }

  Future<void> _uploadFile() async {
    if (_fileLifecycleManager.selectedFile != null) {
      _onUploadStart();
      try {
        // Implement your upload service here
        Dio dio = Dio();
        FormData formData = FormData.fromMap({
          'file': await MultipartFile.fromFile(_fileLifecycleManager.selectedFile!.path!,
              filename: _fileLifecycleManager.selectedFile!.name),
        });
        await dio.post('https://your-api-endpoint.com/upload', data: formData,
            onSendProgress: (sent, total) {
          _onProgressUpdate(sent / total);
        });
        _onUploadComplete();
        ScaffoldMessenger.of(context)
            .showSnackBar(SnackBar(content: Text('File berhasil diunggah!')));
      } catch (e) {
        _onUploadFailed();
        ScaffoldMessenger.of(context)
            .showSnackBar(SnackBar(content: Text('Gagal mengunggah file: $e')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('File Upload Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            _fileLifecycleManager.selectedFile != null
                ? Text(
                    'File: ${_fileLifecycleManager.selectedFile!.name} (${_fileLifecycleManager.selectedFile!.size} bytes)')
                : Text('Tidak ada file yang dipilih'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pickFile,
              child: Text('Pilih File'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _uploadFile,
              child: Text('Unggah File'),
            ),
            SizedBox(height: 20),
            ProgressIndicatorWidget(
                progress: _uploadProgress, isUploading: _isUploading),
          ],
        ),
      ),
    );
  }
}

class ProgressIndicatorWidget extends StatelessWidget {
  final double progress;
  final bool isUploading;

  const ProgressIndicatorWidget({
    required this.progress,
    required this.isUploading,
  });

  @override
  Widget build(BuildContext context) {
    return isUploading
        ? Column(
            children: [
              Text('Mengunggah: ${(progress * 100).toStringAsFixed(0)}%'),
              SizedBox(height: 10),
              LinearProgressIndicator(value: progress),
            ],
          )
        : Text('Tidak ada unggahan yang sedang berlangsung');
  }
}


////////
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:provider/provider.dart';
import 'package:sipaksi/Components/BreadCrumb/BreadCrumbBuilder.dart';
import 'package:sipaksi/Components/Sidebar/SidebarBuilder.dart';
import 'package:sipaksi/Module/Shared/FooterAction.dart';
import 'package:sipaksi/Module/Shared/Module.dart';
import 'package:sipaksi/Module/Shared/constant.dart';
import 'package:table_calendar/table_calendar.dart';

class LoadingState with ChangeNotifier {
  ValueNotifier<bool> _isLoading = ValueNotifier(false);

  ValueNotifier<bool> get isLoading => _isLoading;

  void setLoading(bool loading) {
    _isLoading.value = loading;
    notifyListeners();
  }
}

class JudulTahunUsulanPage extends StatefulWidget {
  const JudulTahunUsulanPage({super.key});

  @override
  State<JudulTahunUsulanPage> createState() => _JudulTahunUsulanPageState();
}

class _JudulTahunUsulanPageState extends State<JudulTahunUsulanPage> {
  @override
  Widget build(BuildContext context) {
    Size size;
    double height, width;

    size = MediaQuery.of(context).size;
    width = size.width;
    height = size.height;
    Module current = Module.penelitian_internal;

    return ChangeNotifierProvider(
      create: (context) => LoadingState(),
      child: Scaffold(
        appBar: AppBar(
          leading: LayoutBuilder(
            builder: (context, constraints) {
              final loadingState = Provider.of<LoadingState>(context);

              return constraints.maxWidth >= 768
                  ? SizedBox.shrink()
                  : IconButton(
                      icon: const Icon(
                        Icons.arrow_back,
                        color: Colors.white,
                      ),
                      onPressed: () => !loadingState.isLoading.value
                          ? Navigator.of(context).pop()
                          : null,
                    );
            },
          ),
          backgroundColor: Theme.of(context).primaryColor,
          title: const Hero(
            tag: "Judul & Tahun Penelitian",
            child: Text(
              "Judul & Tahun Penelitian",
              style: TextStyle(color: Colors.white),
            ),
          ),
        ),
        body: LayoutBuilder(
          builder: (context, constraints) {
            if (constraints.maxWidth > 768) {
              return Row(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Expanded(
                    flex: 1,
                    child: Sidebar.createSidebar(
                      context: context,
                      height: height,
                      list: ListItemsSidebar(current),
                    ),
                  ),
                  Expanded(
                    flex: 3,
                    child: Content(
                      width: width,
                      height: height,
                    ),
                  ),
                ],
              );
            } else {
              return Content(
                width: width,
                height: height,
              );
            }
          },
        ),
      ),
    );
  }
}

class Content extends StatefulWidget {
  const Content({super.key, required this.width, required this.height});

  final double width, height;

  @override
  State<Content> createState() => _ContentState();
}

class _ContentState extends State<Content> {
  late DateTime _focusedDay;
  late DateTime _firstDay;
  late DateTime _lastDay;
  late DateTime _selectedDay;
  late CalendarFormat _calendarFormat;

  @override
  void initState() {
    super.initState();

    _focusedDay = DateTime.parse("2024-01-01");
    _firstDay = DateTime.now().subtract(const Duration(days: 3650));
    _lastDay = DateTime.now().add(const Duration(days: 3650));
    _selectedDay = DateTime.parse("2024-01-01");
    _calendarFormat = CalendarFormat.month;
  }

  @override
  Widget build(BuildContext context) {
    final loadingState = Provider.of<LoadingState>(context);

    return Column(
      children: [
        Expanded(
          child: SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.all(10),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  LayoutBuilder(
                    builder: (context, constraints) {
                      return constraints.maxWidth >= 768
                          ? Container(
                              margin: EdgeInsets.symmetric(
                                vertical: widget.height * 0.02,
                              ),
                              child: StepBreadCrumb.createBreadCrumb(
                                  context: context,
                                  list: [
                                    ItemStepCreadCrumb(
                                      icon: Icons.home,
                                      onTap: () => Navigator.of(context)
                                          .pop(), //pop sebanyak 2 kali
                                    ),
                                    ItemStepCreadCrumb(
                                      title: Module.penelitian_internal.value,
                                      onTap: () => Navigator.of(context).pop(),
                                    ),
                                    ItemStepCreadCrumb(
                                      title: Module.penelitian_internal.value,
                                      onTap: () => {},
                                    ),
                                  ]),
                            )
                          : SizedBox.shrink();
                    },
                  ),
                  Text(
                    "Judul Penelitian",
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w900,
                      color: Theme.of(context).primaryColor,
                    ),
                  ),
                  TextField(
                    keyboardType: TextInputType.text,
                    obscureText: false,
                    onChanged: (value) => {},
                    textInputAction: TextInputAction.next,
                    maxLines: 1,
                    style:
                        TextStyle(color: Theme.of(context).colorScheme.outline),
                    decoration: InputDecoration(
                      errorText: "belum diisi",
                      hintStyle: TextStyle(
                        color: Theme.of(context).colorScheme.outline,
                      ),
                      contentPadding: const EdgeInsets.symmetric(horizontal: 6),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(
                          color: Theme.of(context).colorScheme.outline,
                          width: 1,
                        ),
                      ),
                      focusedBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(
                            color: Theme.of(context).primaryColor, width: 2),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(
                          color: Theme.of(context).colorScheme.outline,
                          width: 1,
                        ),
                      ),
                      errorBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(
                          color: Theme.of(context).colorScheme.error,
                          width: 1,
                        ),
                      ),
                      focusedErrorBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(
                          color: Theme.of(context).colorScheme.error,
                          width: 2,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 10),
                  Text(
                    "Tahun Usulan Kegiatan",
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w900,
                      color: Theme.of(context).primaryColor,
                    ),
                  ),
                  TableCalendar(
                    calendarFormat: _calendarFormat,
                    availableCalendarFormats: const {
                      CalendarFormat.month: "Month"
                    },
                    onFormatChanged: (format) {},
                    focusedDay: _focusedDay,
                    firstDay: _firstDay,
                    lastDay: _lastDay,
                    onPageChanged: (focusedDay) {
                      setState(() {
                        _focusedDay = focusedDay;
                      });
                    },
                    selectedDayPredicate: (day) => isSameDay(day, _selectedDay),
                    onDaySelected: (selectedDay, focusedDay) {
                      setState(() {
                        _selectedDay = selectedDay;
                        _focusedDay = focusedDay;
                      });
                    },
                    calendarStyle: CalendarStyle(
                      weekendTextStyle: TextStyle(
                        color: Theme.of(context).colorScheme.error,
                      ),
                      selectedDecoration: BoxDecoration(
                        shape: BoxShape.circle,
                        color: Theme.of(context).colorScheme.tertiaryContainer,
                      ),
                    ),
                    calendarBuilders: CalendarBuilders(
                      headerTitleBuilder: (context, day) {
                        return Container(
                          padding: const EdgeInsets.all(8.0),
                          child: Text(DateFormat('dd/MMMM/yyyy').format(day)),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
        FooterAction(
          isLoading: loadingState.isLoading,
          optionalBuilder: (height) => SizedBox.shrink(),
          onPress: (double height) {
            if (!loadingState.isLoading.value) {
              loadingState.isLoading.value = true;
              Future.delayed(const Duration(seconds: 2), () {
                loadingState.isLoading.value = false;
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: const Text('Data berhasil disimpan!'),
                    duration: const Duration(seconds: 2),
                    behavior: SnackBarBehavior.floating,
                    margin: EdgeInsets.only(
                      left: 8,
                      right: 8,
                      bottom: height + 8,
                    ),
                  ),
                );
              });
            }
            print("footerHeight: ${height.toString()}");
          },
        ),
      ],
    );
  }
}
